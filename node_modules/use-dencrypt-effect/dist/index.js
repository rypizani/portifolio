'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

var getRandomChar = function (chars) {
    return chars[Math.floor(Math.random() * chars.length)];
};
var getChar = function (i, j, maxLength, oldValue, newValue, chars) {
    if (j > i) {
        return oldValue[j];
    }
    if (i >= maxLength && j < i - maxLength) {
        return newValue[j];
    }
    return getRandomChar(chars);
};
var defaultOptions = {
    chars: [
        "-",
        ".",
        "/",
        "^",
        "*",
        "!",
        "}",
        "<",
        "~",
        "$",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f"
    ],
    interval: 50
};
var useDencrypt = function (options) {
    var _a = react.useState(""), value = _a[0], setValue = _a[1];
    var _b = react.useState(""), result = _b[0], setResult = _b[1];
    var _c = __assign(__assign({}, defaultOptions), options), chars = _c.chars, interval = _c.interval;
    react.useEffect(function () {
        var i = 0;
        var crypting = setInterval(function () {
            setResult(function (oldValue) {
                if (oldValue === value) {
                    clearInterval(crypting);
                    return value;
                }
                var oldLength = oldValue ? oldValue.length : 0;
                var newLength = value.length;
                var maxLength = Math.max(oldLength, newLength);
                return __spreadArrays(new Array(maxLength)).map(function (_, j) { return getChar(i, j, maxLength, oldValue, value, chars); })
                    .join("");
            });
            i++;
        }, interval);
        return function () { return clearInterval(crypting); };
    }, [value, chars, interval]);
    return {
        result: result,
        dencrypt: setValue
    };
};

exports.default = useDencrypt;
exports.useDencrypt = useDencrypt;
//# sourceMappingURL=index.js.map
