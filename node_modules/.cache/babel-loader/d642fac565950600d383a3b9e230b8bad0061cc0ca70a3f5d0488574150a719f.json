{"ast":null,"code":"/**\n * Clean up a scene's materials and geometry\n */\nexport const cleanScene = scene => {\n  scene.traverse(object => {\n    if (!object.isMesh) return;\n    object.geometry.dispose();\n    if (object.material.isMaterial) {\n      cleanMaterial(object.material);\n    } else {\n      for (const material of object.material) {\n        cleanMaterial(material);\n      }\n    }\n  });\n  scene.dispose();\n};\n\n/**\n * Clean up and dispose of a material\n */\nexport const cleanMaterial = material => {\n  material.dispose();\n  for (const key of Object.keys(material)) {\n    const value = material[key];\n    if (value && typeof value === 'object' && 'minFilter' in value) {\n      value.dispose();\n    }\n  }\n};\n\n/**\n * Clean up and dispose of a renderer\n */\nexport const cleanRenderer = renderer => {\n  renderer.dispose();\n  renderer.forceContextLoss();\n  renderer = null;\n};\n\n/**\n * Clean up lights by removing them from their parent\n */\nexport const removeLights = lights => {\n  for (const light of lights) {\n    light.parent.remove(light);\n  }\n};\n\n/**\n * A reasonable default pixel ratio\n */\nexport const renderPixelRatio = 2;","map":{"version":3,"names":["cleanScene","scene","traverse","object","isMesh","geometry","dispose","material","isMaterial","cleanMaterial","key","Object","keys","value","cleanRenderer","renderer","forceContextLoss","removeLights","lights","light","parent","remove","renderPixelRatio"],"sources":["/Users/ryanpizani/Documents/GitHub/portifolio/src/utils/three.js"],"sourcesContent":["/**\n * Clean up a scene's materials and geometry\n */\nexport const cleanScene = scene => {\n  scene.traverse(object => {\n    if (!object.isMesh) return;\n\n    object.geometry.dispose();\n\n    if (object.material.isMaterial) {\n      cleanMaterial(object.material);\n    } else {\n      for (const material of object.material) {\n        cleanMaterial(material);\n      }\n    }\n  });\n\n  scene.dispose();\n};\n\n/**\n * Clean up and dispose of a material\n */\nexport const cleanMaterial = material => {\n  material.dispose();\n\n  for (const key of Object.keys(material)) {\n    const value = material[key];\n    if (value && typeof value === 'object' && 'minFilter' in value) {\n      value.dispose();\n    }\n  }\n};\n\n/**\n * Clean up and dispose of a renderer\n */\nexport const cleanRenderer = renderer => {\n  renderer.dispose();\n  renderer.forceContextLoss();\n  renderer = null;\n};\n\n/**\n * Clean up lights by removing them from their parent\n */\nexport const removeLights = lights => {\n  for (const light of lights) {\n    light.parent.remove(light);\n  }\n};\n\n/**\n * A reasonable default pixel ratio\n */\nexport const renderPixelRatio = 2;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAGC,KAAK,IAAI;EACjCA,KAAK,CAACC,QAAQ,CAACC,MAAM,IAAI;IACvB,IAAI,CAACA,MAAM,CAACC,MAAM,EAAE;IAEpBD,MAAM,CAACE,QAAQ,CAACC,OAAO,CAAC,CAAC;IAEzB,IAAIH,MAAM,CAACI,QAAQ,CAACC,UAAU,EAAE;MAC9BC,aAAa,CAACN,MAAM,CAACI,QAAQ,CAAC;IAChC,CAAC,MAAM;MACL,KAAK,MAAMA,QAAQ,IAAIJ,MAAM,CAACI,QAAQ,EAAE;QACtCE,aAAa,CAACF,QAAQ,CAAC;MACzB;IACF;EACF,CAAC,CAAC;EAEFN,KAAK,CAACK,OAAO,CAAC,CAAC;AACjB,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMG,aAAa,GAAGF,QAAQ,IAAI;EACvCA,QAAQ,CAACD,OAAO,CAAC,CAAC;EAElB,KAAK,MAAMI,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACL,QAAQ,CAAC,EAAE;IACvC,MAAMM,KAAK,GAAGN,QAAQ,CAACG,GAAG,CAAC;IAC3B,IAAIG,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,WAAW,IAAIA,KAAK,EAAE;MAC9DA,KAAK,CAACP,OAAO,CAAC,CAAC;IACjB;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMQ,aAAa,GAAGC,QAAQ,IAAI;EACvCA,QAAQ,CAACT,OAAO,CAAC,CAAC;EAClBS,QAAQ,CAACC,gBAAgB,CAAC,CAAC;EAC3BD,QAAQ,GAAG,IAAI;AACjB,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAME,YAAY,GAAGC,MAAM,IAAI;EACpC,KAAK,MAAMC,KAAK,IAAID,MAAM,EAAE;IAC1BC,KAAK,CAACC,MAAM,CAACC,MAAM,CAACF,KAAK,CAAC;EAC5B;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMG,gBAAgB,GAAG,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}